# Ubuntu + Nginx + uWSGI + Django 部署

标签（空格分隔）： django

---

# 一、安装uWSGI
官网：https://uwsgi-docs.readthedocs.io/en/latest/index.html

**首先，请确保安装的是最新版本的uwsgi，否则可能出现各种坑。**

建议到https://uwsgi-docs.readthedocs.io/en/latest/Download.html页面，下载Stable/LTS版本的源文件。在ubuntu中，
pip3 install 文件名。

不建议：pip3 install uwsgi(不一定是最新版)
不建议：pip install https://projects.unbit.it/downloads/uwsgi-lts.tar.gz(也不一定是最新版)

为什么要最新版：因为现在的官方教程和相关技术文章全是以新版编写的，很多参数名，用法有较大改变。用旧版，你可能连跑都跑不起来。

# 二、Nginx 安装

Ubuntu 默认源里面的Nginx版本比较旧，这里需要先添加一个Nginx的源，来通过apt-get安装新版本的Nginx。

    sudo add-apt-repository ppa:nginx/stable
    apt-get update
    apt-get install nginx

# 三、配置uwsgi

在Django项目下创建uwsgi.ini文件：

    [uwsgi]
    chdir = /home/feixue/CrazyEye
    module = CrazyEye.wsgi:application
    socket = 127.0.0.1:8000
    #master = true         //主进程
    #vhost = true          //多站模式
    #no-site = true        //多站模式时不设置入口模块和文件
    #workers = 2           //子进程数
    #reload-mercy = 10
    #vacuum = true         //退出、重启时清理文件
    #max-requests = 1000
    #limit-as = 512
    #buffer-size = 30000
    #pidfile = ar/run/uwsgi9090.pid    //pid文件，用于下面的脚本启动、停止该进程
    #daemonize = /website/uwsgi9090.log

调用方法：shell中项目路径下：
    uwsgi --ini uwsgi.ini

# 四、配置nginx

备份/etcinx/sites-available文件夹内的default文件，然后编辑它：

```ini
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/docinx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80;
	listen [::]:80;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	# root ar/wwwml;

	# Add index.php to the list if you are using PHP
	# index index.html index.htm index.nginx-debian.html;

	server_name 192.168.1.110;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		# try_files $uri $uri/ =404;
		include  uwsgi_params;
            	uwsgi_pass  127.0.0.1:8000;
	}
	location /static {

	alias /home/feixue/CrazyEye/statics;
	}
	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php7.0-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php7.0-fpm:
	#	fastcgi_pass unix:/run/php/php7.0-fpm.sock;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root ar/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
```

sudo /etc/init.dinx restart 重启服务

在同一子网内，浏览器中访问nginx主机ip地址，就可以看到Django网站了。